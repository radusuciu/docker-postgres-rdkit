name: Build, Push and Create Release

on:
  workflow_dispatch:
  push:
    branches:
      - 'postgres-*rdkit-*'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract PostgreSQL and RDKit versions from branch name
      id: extract_versions
      run: |
        branch_name=$(git branch --show-current)
        echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"
        pg_version=$(echo $branch_name | cut -d '-' -f 2)
        echo "pg_version=$pg_version" >> "$GITHUB_OUTPUT"
        echo "pg_major_version=$(echo $pg_version | cut -d '.' -f 1)" >> "$GITHUB_OUTPUT"
        echo "rdkit_version=$(echo $branch_name | cut -d '-' -f 4)" >> "$GITHUB_OUTPUT"
        echo "git_sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
        current_boost_version=$(grep -oP '(?<=ARG boost_version=)[0-9]+\.[0-9]+' Dockerfile)
        echo "current_boost_version=$current_boost_version" >> "$GITHUB_OUTPUT"
    
    - name: Check if image already exists
      id: check_image
      run: |
        image="ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}-${{ steps.extract_versions.outputs.git_sha_short }}"
        echo "Checking if image $image exists..."
        if output=$(docker manifest inspect "$image" 2>&1); then
          echo "Image $image already exists, no need to build."
          echo "exists=0" >> "$GITHUB_OUTPUT"
        else
          if [[ $output == *"manifest unknown"* ]]; then
            echo "Image $image does not exist, need to build."
            echo "exists=1" >> "$GITHUB_OUTPUT"
          else
            echo "An unexpected error occurred while trying to check if the image exists:"
            echo "$output"
            exit 1
          fi
        fi

    - name: Build and push
      if: steps.check_image.outputs.exists == '1'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}-${{ steps.extract_versions.outputs.git_sha_short }}
          ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}
          ghcr.io/${{ github.repository }}/postgres-rdkit:postgres-${{ steps.extract_versions.outputs.pg_major_version }}-rdkit-${{ steps.extract_versions.outputs.rdkit_version }}
        build-args: |
          postgres_image_version=${{ steps.extract_versions.outputs.pg_version }}
          postgres_major_version=${{ steps.extract_versions.outputs.pg_major_version }}
          rdkit_git_ref=Release_${{ steps.extract_versions.outputs.rdkit_version }}
        cache-from: type=gha,scope=${{ github.repository }}/postgres-rdkit
        cache-to: type=gha,scope=${{ github.repository }}/postgres-rdkit

    - name: Create unique tag
      id: create_unique_tag
      run: |
        # Create a base tag with the format postgres-15.3-rdkit-2023_03_02-20230620
        base_tag=${{ steps.extract_versions.outputs.branch_name }}-$(date +%Y%m%d)
        # Initialize the final tag with the base tag
        final_tag=$base_tag
        # Initialize counter
        counter=1
        # Iterate over all existing tags
        for tag in $(git tag); do
          # If the tag already exists, append the counter to the base tag
          if [[ "$tag" == "$final_tag" ]]; then
            counter=$((counter + 1))
            final_tag=${base_tag}.${counter}
          fi
        done
        # Output the final tag
        echo "final_tag=$final_tag" >> "$GITHUB_OUTPUT"
  
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create_unique_tag.outputs.final_tag }}
        name: Release ${{ steps.create_unique_tag.outputs.final_tag }}
        body: |
          ## Docker Images
          To pull the image, use the following command:
          ```
          docker pull ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}
          ```
    
          ## Versions
          - PostgreSQL: ${{ steps.extract_versions.outputs.pg_version }} ([release notes](https://www.postgresql.org/docs/release/${{ steps.extract_versions.outputs.pg_version }}/))
          - RDKit: ${{ steps.extract_versions.outputs.rdkit_version }} ([release notes](https://github.com/rdkit/rdkit/releases/tag/Release_${{ steps.extract_versions.outputs.rdkit_version }}))
          - Boost: ${{ steps.extract_versions.outputs.current_boost_version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
