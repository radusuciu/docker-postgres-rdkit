name: Build images and check for new versions

on:
  workflow_dispatch:
  # we build the image on every branch push to a release branch
  push:
    branches:
      - 'postgres-*rdkit-*'
  # and we check for new versions daily
  # these two workflows are here so that we can immediately trigger
  # the build when a new version is found and branch created
  # 
  # I prefer them in separate files but then the cron check_versions job
  # cannot trigger the build_and_push_job.. without other hax AFAIK
  #
  # see: https://github.com/radusuciu/docker-postgres-rdkit/issues/12
  schedule:
    - cron: '0 0 * * *'  # runs daily at 00:00

jobs:
  check_versions:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check_branch.outputs.exists }}
      version: ${{ steps.pg_latest.outputs.version }}
      branch_name: ${{ steps.check_branch.outputs.branch_name }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install RDKit
      run: pip install rdkit

    - name: Get latest RDKit version
      id: rdkit_latest
      run: |
        rdkit_version="$(curl -sS "https://api.github.com/repos/rdkit/rdkit/releases/latest" | jq -r '.tag_name' | sed 's/Release_//')"
        echo version="${rdkit_version}" >> "$GITHUB_OUTPUT"
        echo "Latest RDKit version is ${rdkit_version}"

    - name: Get latest Boost version from RDKit
      id: boost_latest
      run: |
        boost_version=$(python -c 'from rdkit import rdBase; print(rdBase.boostVersion.replace("_", "."))')
        echo version="${boost_version}" >> "$GITHUB_OUTPUT"
        echo "Latest Boost version is ${boost_version}"

    - name: Get latest PostgreSQL version
      id: pg_latest
      run: |
        export latest_version="$(curl -sS https://www.postgresql.org/ftp/source/ | grep -oP '(?<=v)[0-9]+\.[0-9]+' | sort -V | tail -1)"
        echo "version=${latest_version}" >> "$GITHUB_OUTPUT"
        echo "major_version=$(echo ${latest_version} | cut -d '.' -f 1)" >> "$GITHUB_OUTPUT"
        echo "Latest PostgreSQL version is ${latest_version}"

    - name: Check if branch exists
      id: check_branch
      run: |
        branch_name="postgres-${{ steps.pg_latest.outputs.version }}-rdkit-${{ steps.rdkit_latest.outputs.version }}"
        echo "branch_name=${branch_name}" >> "$GITHUB_OUTPUT"
        
        if git branch --all | grep -q "origin/${branch_name}"
        then
          echo "Branch for this version combination already exists."
          echo "exists=1" >> "$GITHUB_OUTPUT"
        else
          echo "New version combination detected."
          echo "exists=0" >> "$GITHUB_OUTPUT"
        fi

    - name: Set Git user
      run: |
        git config --global user.name "$(git log -n 1 --pretty=format:%an)"
        git config --global user.email "$(git log -n 1 --pretty=format:%ae)"

    - name: Create new branch and set new Boost version if necessary
      id: update_boost
      run: |
        branch_name=${{ steps.check_branch.outputs.branch_name }}
        if [[ "${{ steps.check_branch.outputs.exists }}" == "0" ]]; then
          git checkout -b $branch_name
          git push --set-upstream origin $branch_name
        else
          git checkout $branch_name
        fi
        current_boost_version=$(grep -oP '(?<=ARG boost_version=)[0-9]+\.[0-9]+' Dockerfile)
        if [[ "${current_boost_version}" != "${{ steps.boost_latest.outputs.version }}" ]]; then
          sed -i "s/ARG boost_version=.*/ARG boost_version=${{ steps.boost_latest.outputs.version }}/" Dockerfile
          git commit -am "Update Boost version to ${{ steps.boost_latest.outputs.version }}"
          git push origin $branch_name
        fi

    - name: Merge changes back to main
      run: |
        # Check if a new branch was created
        if [[ "${{ steps.check_branch.outputs.exists }}" == "0" ]]; then
          # Switch back to the main branch
          git checkout main
          # Merge the new branch into main
          git merge $branch_name
          # Push the changes to the main branch
          git push origin main
        fi

  set_branch_name_matrix:
    runs-on: ubuntu-latest
    needs: check_versions
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    env:
      BRANCH_ALREADY_EXISTS: ${{ needs.check_versions.outputs.exists }}
      NEWEST_BRANCH_NAME: ${{ needs.check_versions.outputs.branch_name }}
    steps:
      - name: Get current branch name
        id: get_branch_name
        run: |
          github_ref=${{ github.ref }}
          echo "branch_name=${github_ref##*/}" >> "$GITHUB_OUTPUT"
      - name: Generate matrix
        id: generate_matrix
        run: |
          # if we triggered by a push to a branch then we need to build that (unless it's the main branch)
          # if in the process we find a new branch, or if this was triggered by a scheduled event, then
          # we need to build that branch too
          # if they are the same, then our matrix should have only one entry

          # if this is scheduled and we created a new branch, then we just build that
          if [[ "${{ github.event_name }}" == "schedule" && "${{ env.BRANCH_ALREADY_EXISTS }}" == "0" ]]; then
            echo "matrix=['${{ env.NEWEST_BRANCH_NAME }}']" >> "$GITHUB_OUTPUT"
          # if we pushed a branch and we also created a new branch, then we maybe need to build both
          elif [[ "${{ github.event_name }}" == "push" && "${{ env.BRANCH_ALREADY_EXISTS }}" == "0" ]]; then
            if [[ "${{ env.NEWEST_BRANCH_NAME }}" == "${{ steps.get_branch_name.outputs.branch_name }}" ]]; then
              echo "matrix=['${{ env.NEWEST_BRANCH_NAME }}']" >> "$GITHUB_OUTPUT"
            else
              echo "matrix=['${{ env.NEWEST_BRANCH_NAME }}', '${{ steps.get_branch_name.outputs.branch_name }}']" >> "$GITHUB_OUTPUT"
            fi
          # if we pushed a branch and we didn't create a new branch, then we just build that
          elif [[ "${{ github.event_name }}" == "push" && "${{ env.BRANCH_ALREADY_EXISTS }}" == "1" ]]; then
            echo "matrix=['${{ steps.get_branch_name.outputs.branch_name }}']" >> "$GITHUB_OUTPUT"
          # if it's a manual push we'll just build that branch
          # technically we can also find a new branch here, but let's let the cron job handle that
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "matrix=['${{ steps.get_branch_name.outputs.branch_name }}']" >> "$GITHUB_OUTPUT"
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: set_branch_name_matrix
    strategy:
      # we create a matrix to handle the case where there's been a bush
      # to a matching branch, or we created a new branch for a new version
      # during the scheduled check_versions job or a manual trigger

      # make sure it's unique though
      matrix:
        branches: ${{ fromJson(needs.set_branch_name_matrix.outputs.matrix) }}

    steps:  
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branches }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract PostgreSQL and RDKit versions from branch name
      id: extract_versions
      run: |
        branch_name=$(git branch --show-current)
        echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"
        pg_version=$(echo $branch_name | cut -d '-' -f 2)
        echo "pg_version=$pg_version" >> "$GITHUB_OUTPUT"
        echo "pg_major_version=$(echo $pg_version | cut -d '.' -f 1)" >> "$GITHUB_OUTPUT"
        echo "rdkit_version=$(echo $branch_name | cut -d '-' -f 4)" >> "$GITHUB_OUTPUT"
        echo "git_sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
        current_boost_version=$(grep -oP '(?<=ARG boost_version=)[0-9]+\.[0-9]+' Dockerfile)
        echo "current_boost_version=$current_boost_version" >> "$GITHUB_OUTPUT"

    - name: Check if image already exists
      id: check_image
      run: |
        image="ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}-${{ steps.extract_versions.outputs.git_sha_short }}"
        echo "Checking if image $image exists..."
        if output=$(docker manifest inspect "$image" 2>&1); then
          echo "Image $image already exists, no need to build."
          echo "exists=0" >> "$GITHUB_OUTPUT"
        else
          if [[ $output == *"manifest unknown"* ]]; then
            echo "Image $image does not exist, need to build."
            echo "exists=1" >> "$GITHUB_OUTPUT"
          else
            echo "An unexpected error occurred while trying to check if the image exists:"
            echo "$output"
            exit 1
          fi
        fi

    - name: Get latest PostgreSQL version
      id: pg_latest
      run: |
        latest_version="$(curl -sS https://www.postgresql.org/ftp/source/ | grep -oP '(?<=v)[0-9]+\.[0-9]+' | sort -V | tail -1)"
        echo "version=${latest_version}" >> "$GITHUB_OUTPUT"
        echo "Latest PostgreSQL version is ${latest_version}"

    - name: Build and push
      if: steps.check_image.outputs.exists == '1'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{
            steps.extract_versions.outputs.pg_version == steps.pg_latest.outputs.version
            && format(
              'ghcr.io/{0}/postgres-rdkit:postgres-{1}-rdkit-{2}',
              github.repository,
              steps.extract_versions.outputs.pg_major_version,
              steps.extract_versions.outputs.rdkit_version
            ) || ''
          }}
          ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}
          ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}-boost-${{ steps.extract_versions.outputs.current_boost_version }}
          ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}-${{ steps.extract_versions.outputs.git_sha_short }}
        build-args: |
          postgres_image_version=${{ steps.extract_versions.outputs.pg_version }}
          postgres_major_version=${{ steps.extract_versions.outputs.pg_major_version }}
          rdkit_git_ref=Release_${{ steps.extract_versions.outputs.rdkit_version }}
        cache-from: type=gha,scope=${{ github.repository }}/postgres-rdkit
        cache-to: type=gha,scope=${{ github.repository }}/postgres-rdkit

    - name: Fetch all tags
      run: git fetch --tags

    - name: Create unique tag
      id: create_unique_tag
      run: |
        # Create a base tag with the format postgres-15.3-rdkit-2023_03_02-20230620
        base_tag=${{ steps.extract_versions.outputs.branch_name }}-$(date +%Y%m%d)
        # Initialize the final tag with the base tag
        final_tag=$base_tag
        # Initialize counter
        counter=1
        # Iterate over all existing tags
        for tag in $(git tag); do
          # If the tag already exists, append the counter to the base tag
          if [[ "$tag" == "$final_tag" ]]; then
            counter=$((counter + 1))
            final_tag=${base_tag}.${counter}
          fi
        done
        # Output the final tag
        echo "final_tag=$final_tag" >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create_unique_tag.outputs.final_tag }}
        name: ${{ steps.create_unique_tag.outputs.final_tag }}
        body: |
          ## Docker Images
          To pull the image, use the following command:
          ```
          docker pull ghcr.io/${{ github.repository }}/postgres-rdkit:${{ steps.extract_versions.outputs.branch_name }}
          ```
    
          ## Versions
          - PostgreSQL: ${{ steps.extract_versions.outputs.pg_version }} ([release notes](https://www.postgresql.org/docs/release/${{ steps.extract_versions.outputs.pg_version }}/))
          - RDKit: ${{ steps.extract_versions.outputs.rdkit_version }} ([release notes](https://github.com/rdkit/rdkit/releases/tag/Release_${{ steps.extract_versions.outputs.rdkit_version }}))
          - Boost: ${{ steps.extract_versions.outputs.current_boost_version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
